
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

spring.datasource.url=jdbc:h2:file:./data/flight_tracking_db
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.hibernate.ddl-auto=update



package com.simpleflighttracker.simpleFlightTracker.controller;

import com.simpleflighttracker.simpleFlightTracker.model.Airport;
import com.simpleflighttracker.simpleFlightTracker.model.Flight;
import com.simpleflighttracker.simpleFlightTracker.service.FlightService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/flights")
public class FlightController {

    @Autowired
    private FlightService service;

    @PostMapping
    public Flight createFlight(@RequestBody Flight f) {
        return service.createFlight(f);
    }

    @GetMapping("/{id}")
    public Flight GetFlightById(@PathVariable Long id){
        return service.getFlightById(id);
    }

    @GetMapping
    public List<Flight> getAllFlights(){
        return service.getAllFlights();
    }

    @GetMapping("/search")
    public List<Flight> searchFlight(@RequestParam Airport origin, @RequestParam Airport destination ){
        return service.searchFlight(origin, destination);
    }

    @PutMapping("/{id}")
    public Flight updateFlight(@PathVariable Long id, @RequestBody Flight f){
        return service.updateFlight(id, f);
    }

    @DeleteMapping("/{id}")
    public void deleteFlight(@PathVariable Long id){
        service.deleteFlight(id);
    }
}


package com.simpleflighttracker.simpleFlightTracker.service;

import com.simpleflighttracker.simpleFlightTracker.model.Airport;
import com.simpleflighttracker.simpleFlightTracker.model.Flight;
import com.simpleflighttracker.simpleFlightTracker.repository.FlightRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FlightService {
    @Autowired
    private FlightRepository repo;

    public Flight createFlight(Flight flight){
        return repo.save(flight);
    }

    public List<Flight> getAllFlights(){
        return repo.findAll();
    }

    public Flight getFlightById(Long id){
        return repo.findById(id)
                .orElseThrow(() -> new RuntimeException("Flight not found" + id ));
    }


    public List<Flight> searchFlight(Airport origin, Airport destination){
        return repo.findByOriginAirportAndDestinationAirport(origin, destination);
    }

    @Transactional
    public Flight updateFlight(Long id, Flight flight){
        Flight existing = getFlightById(id);

        existing.setFlightNumber(flight.getFlightNumber());
        existing.setArrivalTime(flight.getArrivalTime());
        existing.setDepartureTime(flight.getDepartureTime());
        existing.setDestinationAirport(flight.getDestinationAirport());

        return repo.save(existing);
    }

    public void deleteFlight(Long id){
        repo.deleteById(id);
    }
}


package com.simpleflighttracker.simpleFlightTracker.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@Entity
@NoArgsConstructor
@AllArgsConstructor
public class Flight {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private  String flightNumber;

    private LocalDateTime departureTime;
    private LocalDateTime arrivalTime;

    @ManyToOne
    @JoinColumn(name = "origin_airport_id", nullable = false)
    @JsonBackReference
    private Airport originAirport;

    @ManyToOne
    @JoinColumn(name = "destination_airport_id", nullable = false)
    @JsonBackReference
    private Airport destinationAirport;
}

package com.simpleflighttracker.simpleFlightTracker.repository;

import com.simpleflighttracker.simpleFlightTracker.model.Airport;
import com.simpleflighttracker.simpleFlightTracker.model.Flight;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface FlightRepository extends JpaRepository<Flight, Long> {
    List<Flight> findByOriginAirportAndDestinationAirport(Airport origin, Airport destination);
}


